/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Visual;

import Grafos.Grafo;

import Grafos.Vector;

import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import com.mxgraph.swing.mxGraphComponent;

/**
 *
 * @author darkz
 */
import com.mxgraph.view.mxGraph;
import java.awt.Color;
import java.awt.Dimension;
import javax.swing.*;
import java.awt.event.*;
import javax.swing.JOptionPane;



public final class PantallaPrincipal extends JFrame {
public static final int ALTURA = 60;
public static final int ANCHURA = 80;
    
 
 private List<Object> objeto;
 private List<String> nombre;
 private Grafo grafo;
 private int value;

 private mxGraph grafoVisual;
 private mxGraphComponent grafoVisualComponent;
 private Object padre;
 private int X;
 private int Y;
  
    /**
     * Creates new form pantallaPrincipal
     */
    
    public PantallaPrincipal() {
        super("Proyecto Teoria");
       X = 1;
       Y = 20;
        initComponents();
        initGraf();
    }
    public void initGraf() {
        objeto = new ArrayList<Object>();
        nombre = new ArrayList<String>();
        grafo =new Grafo();
        value = 0;
        grafoVisual = new mxGraph();
        grafoVisualComponent = new mxGraphComponent(grafoVisual);
        grafoVisualComponent.setBounds(Pizarra.getBounds());
       
        Pizarra.add(grafoVisualComponent);
        Pizarra.setBackground(Color.white);
        padre = grafoVisual.getDefaultParent();
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AgregarVertice = new javax.swing.JButton();
        AgregarArista = new javax.swing.JButton();
        GradoMaximoGrafo = new javax.swing.JButton();
        GradoMenorGrafo = new javax.swing.JButton();
        Linea = new javax.swing.JSeparator();
        Pizarra = new javax.swing.JPanel();
        SumaDeGrados = new javax.swing.JButton();
        DibujarCamino = new javax.swing.JButton();
        DetectarCiclos = new javax.swing.JButton();
        LimpiarCamino = new javax.swing.JButton();
        Borrar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                formComponentAdded(evt);
            }
        });

        AgregarVertice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-plus-24.png"))); // NOI18N
        AgregarVertice.setText("Agregar Vertice");
        AgregarVertice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarVerticeActionPerformed(evt);
            }
        });

        AgregarArista.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-up-arrow-24.png"))); // NOI18N
        AgregarArista.setText("Agregar Arista");
        AgregarArista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarAristaActionPerformed(evt);
            }
        });

        GradoMaximoGrafo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-power-bi-24.png"))); // NOI18N
        GradoMaximoGrafo.setText("Grado del Grafo");
        GradoMaximoGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GradoMaximoGrafoActionPerformed(evt);
            }
        });

        GradoMenorGrafo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-less-than-24.png"))); // NOI18N
        GradoMenorGrafo.setText("Grado Menor");
        GradoMenorGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GradoMenorGrafoActionPerformed(evt);
            }
        });

        Pizarra.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout PizarraLayout = new javax.swing.GroupLayout(Pizarra);
        Pizarra.setLayout(PizarraLayout);
        PizarraLayout.setHorizontalGroup(
            PizarraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        PizarraLayout.setVerticalGroup(
            PizarraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 393, Short.MAX_VALUE)
        );

        SumaDeGrados.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-sigma-24.png"))); // NOI18N
        SumaDeGrados.setText("Suma de Grados");
        SumaDeGrados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SumaDeGradosActionPerformed(evt);
            }
        });

        DibujarCamino.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-road-24.png"))); // NOI18N
        DibujarCamino.setText("Camino");
        DibujarCamino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DibujarCaminoActionPerformed(evt);
            }
        });

        DetectarCiclos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-process-24.png"))); // NOI18N
        DetectarCiclos.setText("Ciclo");
        DetectarCiclos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DetectarCiclosActionPerformed(evt);
            }
        });

        LimpiarCamino.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-clean-24.png"))); // NOI18N
        LimpiarCamino.setText("Limpiar");
        LimpiarCamino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimpiarCaminoActionPerformed(evt);
            }
        });

        Borrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-trash-24.png"))); // NOI18N
        Borrar.setText("Borrar Grafo");
        Borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setToolTipText("");
        jPanel1.setPreferredSize(new java.awt.Dimension(1, 100));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));
        jPanel2.setPreferredSize(new java.awt.Dimension(1, 0));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel1.setText("Herramintas basicas");

        jLabel2.setText("Calculos");

        jLabel3.setText("Verificaciones");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Pizarra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(Borrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(AgregarVertice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(AgregarArista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(LimpiarCamino, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(Linea, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(SumaDeGrados, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                                    .addComponent(GradoMaximoGrafo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(GradoMenorGrafo, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DibujarCamino, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DetectarCiclos, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(Pizarra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Linea, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(GradoMenorGrafo)
                                    .addComponent(GradoMaximoGrafo)
                                    .addComponent(AgregarVertice)
                                    .addComponent(AgregarArista))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Borrar)
                                        .addComponent(LimpiarCamino))
                                    .addComponent(SumaDeGrados, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(DibujarCamino)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(DetectarCiclos))))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AgregarVerticeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarVerticeActionPerformed
        // TODO add your handling code here:
        
        String _nombre = JOptionPane.showInputDialog(this,"Escribe nombre del vertice ","Agregar Vertice",JOptionPane.INFORMATION_MESSAGE);
        
        if(_nombre !=null){
            if(!_nombre.isEmpty()){
                if(!Repetido(_nombre)){
                    grafoVisual.getModel().beginUpdate();
                    try
                    {

                        if(X == 1){
                            objeto.add(grafoVisual.insertVertex(padre, null, _nombre, 20,CalcularY(),ANCHURA, ALTURA, "shape=ellipse;perimeter=ellipsePerimeter"));
                            X = 20;
                        }else {
                            objeto.add(grafoVisual.insertVertex(padre, null, _nombre, CalcularX(),CalcularY(),ANCHURA, ALTURA, "shape=ellipse;perimeter=ellipsePerimeter"));
                        }

                    nombre.add(_nombre);
                    grafo.anadirVector(_nombre,value);
                    grafo.anadirVectorCiclo(_nombre, value);
                    value = value+1;

                    }
                    finally
                    {
                        grafoVisual.getModel().endUpdate();
                    }
                }
            }
        }
    }//GEN-LAST:event_AgregarVerticeActionPerformed

    private void formComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_formComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentAdded
    
    private void AgregarAristaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarAristaActionPerformed
        try{
            if(grafo != null && !grafo.isEmpty()){
                
            String verticeBase = JOptionPane.showInputDialog(this,"Escribe primer vertice ","Ingresa la arista",JOptionPane.INFORMATION_MESSAGE);

                if(!"".equals(verticeBase) && verticeBase != null ){

                    String verticeObjetivo = JOptionPane.showInputDialog("Escribe segundo vertice ");

                    if(!"".equals(verticeObjetivo) && verticeObjetivo != null){

                        if( !grafo.getVector(verticeBase).checkArista(verticeObjetivo) || !grafo.getVector(verticeObjetivo).checkArista(verticeBase)){

                            grafoVisual.getModel().beginUpdate();
                            grafo.getVector(verticeBase).anadirArista(verticeObjetivo);
                            grafo.getVector(verticeObjetivo).anadirArista(verticeBase);
                            grafo.getVector(verticeBase).anadirAristaCiclo(verticeObjetivo);


                            try
                                {
                                int posicionVerticeBase = 0;
                                int pBase=0;
                                for(String nom:nombre){
                                    if(nom.equals(verticeBase)){
                                        posicionVerticeBase= pBase;
                                    }
                                    pBase++;
                                }

                                int posicionVerticeObjetivo = 0;
                                int pObjetivo=0;
                                for(String nom:nombre){
                                    if(nom.equals(verticeObjetivo)){
                                        posicionVerticeObjetivo = pObjetivo;
                                    }
                                    pObjetivo++;
                                }


                                 grafoVisual.insertEdge(padre, null, "", objeto.get(posicionVerticeBase),objeto.get(posicionVerticeObjetivo),"endArrow=none");


                                }
                            finally
                                {
                                grafoVisual.getModel().endUpdate();
                                }
                        }else{
                                JOptionPane.showMessageDialog(null,""+" Arista Existente!"," Abvertencia",JOptionPane.WARNING_MESSAGE); 
                        }
                   }
                }
            }else{
                 JOptionPane.showMessageDialog(null,""+" No hay vertices! "," Abvertencia",JOptionPane.WARNING_MESSAGE); 
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Probablemente la arista no existe o esta mal escrita"," Abvertencia",JOptionPane.WARNING_MESSAGE); 
        }
    }//GEN-LAST:event_AgregarAristaActionPerformed

    private void GradoMaximoGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GradoMaximoGrafoActionPerformed
        int maximo = 0;
               
               for(Vector lo:grafo.getLista()){
                   if(lo.cantidadAristas()>maximo){
                       maximo = lo.cantidadAristas();
                   }
               }
            JOptionPane.showMessageDialog(null,""+maximo,"Grado del Grafo",JOptionPane.PLAIN_MESSAGE);
        
    }//GEN-LAST:event_GradoMaximoGrafoActionPerformed

    private void GradoMenorGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GradoMenorGrafoActionPerformed
       int maximo = 0;
               
               for(Vector lo:grafo.getLista()){
                   if(lo.cantidadAristas()<maximo || maximo == 0){
                       maximo = lo.cantidadAristas();
                   }
               }
            
            JOptionPane.showMessageDialog(null,""+maximo,"Grado Menor",JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_GradoMenorGrafoActionPerformed

    private void SumaDeGradosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SumaDeGradosActionPerformed
        int maximo = 0;
               
               for(Vector lo:grafo.getLista()){
                   maximo += lo.cantidadAristas();
               }
            
            JOptionPane.showMessageDialog(null,""+maximo,"Suma de Grados",JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_SumaDeGradosActionPerformed

    private void DibujarCaminoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DibujarCaminoActionPerformed
        
         List<String> vectores_camino = new ArrayList<String>();
         String _camino = JOptionPane.showInputDialog("Escribe un camino para el Grafo ejemplo: A,B,C");
         String temp = "";
         
         if(_camino != null){
         
         for(int x = 0; x <_camino.length();x++){
            
             if(_camino.charAt(x)==','){
                 vectores_camino.add(temp);
                 temp ="";  
                 x++;
             }
              temp += _camino.charAt(x);
              
         }
         vectores_camino.add(temp);
         
         System.out.println(vectores_camino);
         boolean v_v_grafo=true;
         
         for(int x = 0;x< vectores_camino.size();x++){
            
             if(!grafo.encontrarVector(vectores_camino.get(x))){
                 v_v_grafo=false;
             };
         }
         
         if(!v_v_grafo){
               JOptionPane.showMessageDialog(null,""+"Algunos Vertices no existen!"," Abvertencia",JOptionPane.WARNING_MESSAGE);
         }else{
             boolean validacion = true;
              for(int x = 0;x< vectores_camino.size()-1;x++){
                  
                  if(!grafo.getVector(vectores_camino.get(x)).checkArista(vectores_camino.get(x+1))){
                      validacion = false;
                  }
              
              }
              if(validacion == false){
                  JOptionPane.showMessageDialog(null,""+"Camino no es valido!"," Abvertencia",JOptionPane.WARNING_MESSAGE); 
              }else{
                  
                  
                   for(int x = 0; x< vectores_camino.size()-1 ; x++){
                       int posicionVerticeBase = 0;
                       int pBase=0;
                        for(String nom:nombre){
                            if(nom.equals(vectores_camino.get(x))){
                            posicionVerticeBase= pBase;
                        }
                        pBase++;
                        }
                
                    int posicionVerticeObjetivo = 0;
                    int pObjetivo=0;
                    for(String nom:nombre){
                        if(nom.equals(vectores_camino.get(x+1))){
                        posicionVerticeObjetivo = pObjetivo;
                    }
                        pObjetivo++;
                    }
              
                 
                 grafoVisual.insertEdge(padre, null, "", objeto.get(posicionVerticeBase),objeto.get(posicionVerticeObjetivo),"endArrow=none;strokeColor=black");
                
                  }
                   System.out.println("Exito");
              }
              
         }
         
         
         }
        
    }//GEN-LAST:event_DibujarCaminoActionPerformed

    private void DetectarCiclosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DetectarCiclosActionPerformed
        ArrayList <Integer> adj[] = new ArrayList[nombre.size()];
            for(int i = 0; i < nombre.size(); i++)
                adj[i] = new ArrayList<Integer>();
            
        for(Vector lol:grafo.getLista()){
           int temp;
           
           for(String names:lol.aristasCiclo){
               temp = grafo.getVectornu(names);
               grafo.addEdge(adj, lol.getNumber(), temp);
           }
        }

 
        if (grafo.CiclosDesconectados(adj, nombre.size()))
            JOptionPane.showMessageDialog(null,"Se han detectado ciclos en el grafo","Deteccion de ciclos",JOptionPane.PLAIN_MESSAGE);
        else
            JOptionPane.showMessageDialog(null,"No se han detectado ciclos","Deteccion de ciclos",JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_DetectarCiclosActionPerformed

    private void LimpiarCaminoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimpiarCaminoActionPerformed
       
        int pBase = 0;
        for(String baseNom:nombre){
                       
                    int pObjetivo=0;
                    for(String nom:nombre){
                        
                        if(grafo.getVector(baseNom).checkArista(nom)){
                           
                           grafoVisual.insertEdge(padre, null, "", objeto.get(pBase),objeto.get(pObjetivo),"endArrow=none;");
                           grafoVisual.setCellStyle("endArrow=none;");
                      
                        }
                        
                        pObjetivo++;
                    }
                        
             pBase++;           
                        
        }
                        
         
                  
    }//GEN-LAST:event_LimpiarCaminoActionPerformed

    private void BorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarActionPerformed
        X = 1;
       Y = 20;
        Pizarra.removeAll();
        initGraf();// TODO add your handling code here:
        
        
    }//GEN-LAST:event_BorrarActionPerformed
   
    private boolean Repetido(String _nombre){
        for(String nom:nombre){
                    if(nom.equals(_nombre)){
                        JOptionPane.showMessageDialog(null,""+" Vertice Repetido!"," Abvertencia",JOptionPane.WARNING_MESSAGE);
                       return true; 
                    }
        }
        return false;
    }
    
    private int CalcularX(){
        return X =( X > getBounds().width -200)? 20 : X + ANCHURA + 10;
    }
    private int CalcularY(){
        if(Y > getBounds().height){
            Y = 0;
        }else if( X == 20){
            Y += ALTURA + 10;
        }
        return Y ;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PantallaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AgregarArista;
    private javax.swing.JButton AgregarVertice;
    private javax.swing.JButton Borrar;
    private javax.swing.JButton DetectarCiclos;
    private javax.swing.JButton DibujarCamino;
    private javax.swing.JButton GradoMaximoGrafo;
    private javax.swing.JButton GradoMenorGrafo;
    private javax.swing.JButton LimpiarCamino;
    private javax.swing.JSeparator Linea;
    private javax.swing.JPanel Pizarra;
    private javax.swing.JButton SumaDeGrados;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
